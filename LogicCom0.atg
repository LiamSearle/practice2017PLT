using Library;

COMPILER LogicCom $CN
/* Simple Boolean expression compiler level 1 grammar  - Coco/R for C#
   Evaluation is to be achieved by generating code for, and using, the PVM.

   As supplied 24 Hours before the November examination, 2017

   P.D. Terry, Rhodes University, 2017

   Grammar for basic evaluator only.  Firstly, attribute this to get a working
   evaluator that translates its input into PVM code, and then go on to add
   the extra syntax, semantics, and code generation to handle function
   definitions and function calls */

/* You will probably prefer to use the alternative version that has been
   spread out for ease of editing */

  public static bool
    debug    = false,
    listCode = false,
    warnings = true;

/* -------------------------------------------------------------------------- */

CHARACTERS
  lf         = CHR(10) .
  backslash  = CHR(92) .
  control    = CHR(0) .. CHR(31) .
  uLetter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .
  lLetter    = "abcdefghijklmnopqrstuvwxyz" .
  letter     = uLetter + lLetter .
  digit      = "0123456789" .
  stringCh   = ANY - '"' - control - backslash .
  printable  = ANY - control .

TOKENS
  variable   = lLetter .
  number     = digit { digit } .
  stringLit  = '"' { stringCh | backslash printable } '"' .

PRAGMAS
  CodeOn     = "$C+" .                    (. listCode  = true; .)
  CodeOff    = "$C-" .                    (. listCode  = false; .)
  DebugOn    = "$D+" .                    (. debug = true; .)
  DebugOff   = "$D-" .                    (. debug = false; .)

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/"

IGNORE CHR(9) .. CHR(13)

PRODUCTIONS
  LogicCom       = { Statement } .
  Statement      = Assignment | ReadStatement | WriteStatement | ";" .
  Assignment     = Variable "=" Expression ";" .
  ReadStatement  = "read" "(" ReadElement { "," ReadElement } ")" ";" .
  ReadElement    = stringLit | Variable .
  WriteStatement = (   "write"     "("   WriteList   ")"
                     | "writeLine" "(" [ WriteList ] ")"
                   ) ";" .
  WriteList      = WriteElement { "," WriteElement } .
  WriteElement   = stringLit | Expression .
  Expression     = AndExp { "or" AndExp } .
  AndExp         = EqlExp { "and" EqlExp } .
  EqlExp         = NotExp { "==" NotExp | "!=" NotExp } .
  NotExp         = Factor | "not" NotExp .
  Factor         = "true" | "false" | Variable | "(" Expression ")" .
  Variable       = variable .
END LogicCom.
