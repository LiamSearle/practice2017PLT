using Library;

COMPILER LogicCom $CN
/* Simple Boolean expression compiler level 1 grammar  - Coco/R for C#
   Evaluation is to be achieved by generating code for, and using, the PVM.

   As supplied 24 Hours before the November examination, 2017

   P.D. Terry, Rhodes University, 2017

   Grammar for basic evaluator only.  Firstly, attribute this to get a working
   evaluator that translates its input into PVM code, and then go on to add
   the extra syntax, semantics, and code generation to handle function
   definitions and function calls */

/* This version spread out for ease of editing */


  public static bool
    debug    = false,
    listCode = false,
    warnings = true;

  static string Unescape(string s) {
  /* Replaces escape sequences in s by their Unicode values */
    StringBuilder buf = new StringBuilder();
    int i = 0;
    while (i < s.Length) {
      if (s[i] == '\\') {
        switch (s[i+1]) {
          case '\\': buf.Append('\\'); break;
          case '\'': buf.Append('\''); break;
          case '\"': buf.Append('\"'); break;
          case  'r': buf.Append('\r'); break;
          case  'n': buf.Append('\n'); break;
          case  't': buf.Append('\t'); break;
          case  'b': buf.Append('\b'); break;
          case  'f': buf.Append('\f'); break;
          default:   buf.Append(s[i+1]); break;
        }
        i += 2;
      }
      else {
        buf.Append(s[i]);
        i++;
      }
    }
    return buf.ToString();
  } // Unescape

/* ---------------------------------------------------------------------- */

CHARACTERS
  lf         = CHR(10) .
  backslash  = CHR(92) .
  control    = CHR(0) .. CHR(31) .
  uLetter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .
  lLetter    = "abcdefghijklmnopqrstuvwxyz" .
  letter     = uLetter + lLetter .
  digit      = "0123456789" .
  stringCh   = ANY - '"' - control - backslash .
  printable  = ANY - control .

TOKENS
  variable   = lLetter .
  number     = digit { digit } .
  stringLit  = '"' { stringCh | backslash printable } '"' .

PRAGMAS
  CodeOn     = "$C+" .                    (. listCode  = true; .)
  CodeOff    = "$C-" .                    (. listCode  = false; .)
  DebugOn    = "$D+" .                    (. debug = true; .)
  DebugOff   = "$D-" .                    (. debug = false; .)

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/"

IGNORE CHR(9) .. CHR(13)

PRODUCTIONS
  LogicCom
  =  { Statement
     }
  .

  Statement
  =   Assignment
    | ReadStatement
    | WriteStatement
    | ";"
  .

  Assignment
  =  Variable
     "="
     Expression
     ";"
  .

  ReadStatement
  =  "read" "("
       ReadElement
       { ","
         ReadElement
       }
     ")" ";"
  .

  ReadElement
  =   stringLit
    | Variable
  .

  WriteStatement
  = (   "write"
          "(" WriteList
          ")"
      | "writeLine"
          "(" [ WriteList
          ]
          ")"
    ) ";"
  .

  WriteList
  = WriteElement
    { ","
      WriteElement
    }
  .

  WriteElement
  =   stringLit
    | Expression
  .

  Expression
  = AndExp
    { "or" AndExp
    }
  .

  AndExp
  = EqlExp
    { "and" EqlExp
    }
  .

  EqlExp
  = NotExp
    {   "==" NotExp
      | "!=" NotExp
    }
  .

  NotExp
  =   Factor
    | "not" NotExp
  .

  Factor
  =   "true"
    | "false"
    | Variable
    | "(" Expression ")"
  .

  Variable
  = variable
  .

END LogicCom.
